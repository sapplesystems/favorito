#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv/config');
var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.APP_PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * socket code start here
 */
// var db = require('../config/db');
// const io = require('socket.io')(server);
// const user = {};
// io.on('connection', socket => {
//     socket.on('new-user-joined', data => {
//         user[socket.id] = data;
//         socket.broadcast.emit('user-joined', data.user_name);
//     });

//     socket.on('send', args => {
//         var postdata = {
//             user_id: user[socket.id].user_id,
//             user_name: user[socket.id].user_name,
//             message: args.message,
//             photo: args.photo
//         };

//         var sql = "INSERT INTO business_chats SET ?";
//         db.query(sql, postdata, function(err, result) {
//             if (!err) {
//                 socket.broadcast.emit('receive', { message: postdata.message, photo: postdata.photo, name: user[socket.id].user_name });
//             }
//         });
//     });

//     socket.on('disconnect', message => {
//         socket.broadcast.emit('disconnect', user[socket.id].user_name);
//         delete user[socket.id];
//     });
// });
/**
 * socket code end here
 */


/**
 * socket code by amit start here
 */

var db = require('../config/db');
const io = require('socket.io')(server);
const user = {};
io.on('connection', socket => {

    socket.on('new-user-joined', data => {
        user[socket.id] = data;
        socket.broadcast.emit('user-joined', data.user_name);
    });

    socket.on('send', args => {
        var postdata = {
            user_id: user[socket.id].user_id,
            user_name: user[socket.id].user_name,
            message: args.message,
            photo: args.photo
        };

        var sql = "INSERT INTO business_chats SET ?";
        db.query(sql, postdata, function(err, result) {
            console.log('save database')
            socket.broadcast.emit('consolelog', 'asdfasdfasdfsd')
            if (!err) {
                socket.broadcast.emit('receive', { message: postdata.message, photo: postdata.photo, name: user[socket.id].user_name });
            }
        });
        // var sql = "INSERT INTO business_chats SET ?";
        // db.query(sql, postdata, function(err, result) {
        //     console.log('save database')
        //     socket.broadcast.emit('consolelog', 'asdfasdfasdfsd')
        //     if (!err) {
        //         socket.broadcast.emit('receive', { message: postdata.message, photo: postdata.photo, name: user[socket.id].user_name });
        //     }
        // });
    });

    socket.on('disconnect', message => {
        socket.broadcast.emit('disconnect', user[socket.id].user_name);
        delete user[socket.id];
    });
});

/**
 * socket code by amit end here
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}